---
- name: Install MySQL server and set up the database
  hosts: database_server
  become: yes
  vars_files: 
    - ../misc/vault.yml
  vars:
    ansible_become_pass: "{{ database_server_pass }}"
    sql_local_path: "../misc/db-data.sql"  # Path to the SQL file on the control node
    sql_remote_path: "/tmp/db-data.sql"
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Ensure apt lists directory exists # Fails due lock if it doesn't exist
      file:
        path: /var/lib/apt/lists
        state: directory
        mode: '0755'

    - name: Update apt repository cache
      apt:
        update_cache: yes

    - name: Upgrade all packages
      apt:
        upgrade: dist

    - name: Install MySQL server
      apt:
        name:
          - mysql-server
          - python3-pymysql
        state: present

    - name: Ensure MySQL service is running
      service:
        name: mysql
        state: started
        enabled: true
        
    - name: Set root password 
      mysql_user:
        name: root 
        password: "{{ database_server_pass }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
        state: present

    - name: Create /root/.my.cnf file from template
      template:
        src: ../misc/mysql-root.ini.j2
        dest: /root/.my.cnf
        owner: root
        group: root
        mode: '0600'

    - name: Restart MySQL
      service:
        name: mysql
        state: restarted

    - name: Copy SQL file to the managed node
      copy:
        src: "{{ sql_local_path }}"
        dest: "{{ sql_remote_path }}"
        mode: '0644'

    - name: Load database schema and data from SQL file
      shell: |
        mysql -u root < {{ sql_remote_path }}
      args:
        executable: /bin/bash
      ignore_errors: yes # incase the database already exists

    - name: Create MySQL user
      mysql_user:
        name: webuser
        password: "{{ db_web_pass }}"
        host: '%'
        priv: 'hospital_db.*:ALL'
        state: present
        login_user: root
        login_password: "{{ database_server_pass }}"

    - name: Allow access to mysql port 3306
      community.general.ufw:
        rule: allow
        port: '3306'

    - community.general.ufw:
        rule: allow
        port: ssh

    - name: Enable UFW
      community.general.ufw:
        state: enabled

    - name: Update MySQL bind-address 
      lineinfile: 
        path: /etc/mysql/mysql.conf.d/mysqld.cnf 
        regexp: '^bind-address' 
        line: 'bind-address = 0.0.0.0' 
        state: present 

    - name: Restart MySQL
      service:
        name: mysql
        state: restarted

    - name: Clean up SQL file from the target system
      file:
        path: "{{ sql_remote_path }}"
        state: absent